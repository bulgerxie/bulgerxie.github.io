---
layout: post
title:  "Day8 作用域、内存问题 "
date:   2017-06-07
categories: 《JavaScript高级程序设计》笔记
spend: 3.5h
excerpt: ""
---
#### 一、执行环境和作用域链

执行环境定义了函数或变量能有权访问的其他数据，全局环境是最外围的一个环境，且每一个函数都有一个执行环境，而每一个执行环境，都有一个与之对应的对象变量保存这些数据，供解析器使用。当执行流从最外围进入到一个函数的时候，函数的环境被推入一个环境栈中，执行完后弹出该栈，控制权继续返回之前运行的环境。

代码在一个环境中运行时，会创建一个作用域链，它的用途是保障有权访问的变量或函数的`有序访问`，作用域链的前端，是当前代码执行环境的变量对象。它的下一个变量对象来自包含它的环境，以此类推，全局执行环境的变量始终是作用域链的最后一个对象。

标识符(变量)的解析就是沿着作用域链一级一级的向上搜索的过程。从最前端开始，逐级查找，找到就会停止，所以`局部变量会覆盖全局的同名变量`、`访问局部变量比访问全局变量快`。如果连全局环境都找不到，则意味着该变量未申明。

#### 二、垃圾回收
JavaScript会周期性的监测出执行环境中不再使用的内存，然后释放掉。浏览器中具体有两种实现。  
1.引用计数  
含义就是记录每一个值被引用的次数。把一个引用类型值或是基本类型值赋给一个变量，该值的引用次数加1，包含对该引用的变量又取到了另外一个值，则这个值引用次数减1。引用次数为0是，就会在下一次垃圾回收器运行时，释放那个值所占的内存。  
这种方式有一个严重的问题(IE8以下会出现)，循环引用:
{% highlight javascript %}  
    function problem() {
        var objA = new Object();
        var objB = new Object();
        
        objA.attr = objB;
        objB.attr = objA;
    }
{% endhighlight %} 

函数结束时objA和objB的引用数永远是都是2，所以不会被采用这种回收机制的浏览器所清除掉。  

2.标记清除  
垃圾回收器会在运行时给内存中的所有变量都打上标记，然后再去掉执行环境中的变量和被执行环境中的变量引用的变量的标记，由于环境中的变量已经无法再访问这些被标记的变量了，这些变量将在下一次垃圾回收器工作时被回收。

现代浏览器基本都使用标记清除的方式来做垃圾回收，但这样也不是完美的。标记清除的后的内存空间是不连续的，后来又出现了基于标记清除的改进版，标记-整理方法，该方法会在做标记的时候把`活着`的内存尽量移动到一边，清除时再释放边界部分，不过这样的效率没有标记清除高，反正浏览器给什么就用什么吧~

#### 三、管理内存
为了避免运行JavaScript的网页导致系统崩溃，所以分配给Web浏览器的内存有限。因此，优化内存可以让页面获得更好的性能。
* 解除引用:手动清除不再使用的全局对象、全局对象属性及循环引用变量的引用
* 不需要`interval`或者`timeout`时，最好调用`clearInterval`或者`clearTimeout`
* 避免创建对象，类似于`var obj = {};`，可以在使用到的时候再直接赋值。使用`array.length = 0`清空数组
