---
layout: post
title:  "Day23 最佳实践-可维护性"
date:   2017-06-23
categories: 《JavaScript高级程序设计》笔记
spend: 2h
excerpt: ""
---
#### 一、可维护性
可维护性的代码需要遵循以下几点:
* `直观性`: 让代码简单易懂
* `可拓展性`: 代码架构上容易对核心应用进行拓展
* `可调试性`: 出错时，代码能提供足够的信息方便排查问题

##### 1.可读性
* 命名:变量名使用名词，函数名使用动词开头，如`getName()`。返回布尔类型值的以`isDisable()`开头。
* 变量初始化: 初始该值时就表明这个变量未来将用于存储哪一个类型的值。如下:
{% highlight javascript %}
    var name = ""; //String
    var age = -1;  //Number
    var habits = [];  //Array
    var person = null;  //Object
{% endhighlight %}

##### 2.解耦CSS/JavaScript
避免直接在JavaScript修改元素的样式，而是通过修改对应CSS的类名来达到目的。  

##### 3.解耦应用逻辑/事件处理程序
把事件处理程序中包含的应用逻辑分离出来，便于维护。示例:
{% highlight javascript %}
    function handleKeyPress(event) {
        if (event.keyCode === 13) {
            var target = event.target;
            var value = 5 * parseInt(target.value);
            if (value > 20) {
                document.getElementById('error').style.display = 'block';
            }
        }
    }
{% endhighlight %}

解耦后:
{% highlight javascript %}
    function validateValue(value){
        if (value > 20) {
            document.getElementById('error').style.display = 'block';
        }
    }
    function handleKeyPress(event) {
        if (event.keyCode === 13) {
            var target = event.target;
            var value = 5 * parseInt(target.value);
            validateValue(value);
        }
    }
{% endhighlight %}

##### 4.优化循环
* 减值迭代 
* 简化终止条件: 使用减值迭代后，终止条件的算法复杂度为O(1)
* 简化循环体
* 使用后测试循环: do-while语句

