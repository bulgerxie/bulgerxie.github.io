---
layout: post
title:  "Day19 JSON"
date:   2017-06-19
categories: 《JavaScript高级程序设计》笔记
spend: 2h
excerpt: ""
---
##### 1.语法
JSON作为一种数据格式，有以下三种类型的值:
* 简单值: 可以是字符串、数值、布尔值和null，不能是undefined。例如数值`3`、字符串`"simple"`都是有效的JSON数据
* 对象: 键值对中的值可以是简单值，也可以是复杂数据类型的值(对象或数组)，切记键必须加双引号
* 数组: 数组的值也可以是任意类型——简单值、对象或数组。`["hello", 3]`也是有效的JSON数据

##### 2.JSON对象
JSON优于XML的点在于它是JavaScript的子集，能够被`eval()`函数解析、解释并返回JavaScript对象和数组。使用XML格式，我们想取得某个值，需要在DOM结构中通过一大堆方法来找寻;而使用JSON格式，转化为JavaScript对象后就像使用原生对象一样简单。

在ECMAScript5里，定义了全局对象JSON。IE8+才支持这个对象，对于不支持的浏览器，可以用[JSON-js](https://github.com/douglascrockford/JSON-js)来提供支持。
JSON对象有两个方法:
* stringify(): 把JavaScript对象序列化为JSON字符串
* parse(): 把JSON字符串解析为JavaScript对象

{% highlight javascript %}
    var obj = {
        name: "bulger",
        age: 18,
        address: undefined,
        habits: ["sports", "games"]
    };
    var textJSON = JSON.stringify(obj);
    console.log(textJSON);  //{"name":"bulger","age":18,"habits":["sports","games"]}
{% endhighlight %}
默认情况下，`JSON.stringify()`输出的JSON字符串不包含任何空格字符或缩进。并且在序列化JavaScript对象时，会忽略所有函数及原型成员，值为`undefined`的属性也会被跳过。

##### 3.序列化选项
`JSON.stringify()`还可以传入第二、第三个参数，第二个参数是一个过滤器，可以是数组或函数，第三个参数是一个缩进值(字符串或表示多少空格的数值)。
{% highlight javascript %}
    var obj = {
        name: "bulger",
        age: 18,
        address: undefined,
        habits: ["sports", "games"]
    };
    var textJSON = JSON.stringify(obj, ["name", "habits"]);
    console.log(textJSON);  //{"name":"bulger","habits":["sports","games"]}
{% endhighlight %}
过滤器为数组时，返回的字符串中，就会只包含数组中的字符串的属性。
{% highlight javascript %}
    var obj = {
        name: "bulger",
        age: 18,
        address: undefined,
        habits: ["sports", "games"]
    };
    var textJSON = JSON.stringify(obj, function(key, value){
        switch(key){
            case "name":
                return "draven";
            case "habits":
                return ["reading"];
            default:
                return value;
        }
    });
    console.log(textJSON);  //{"name":"draven","age":18,"habits":["reading"]}
{% endhighlight %}
函数过滤器根据传入的键来决定结果。  

第三个参数用于控制结果中的缩进和空白符。如果是个数值，它表示每个级别缩进的空格数。
{% highlight javascript %}
    var obj = {
        name: "bulger",
        age: 18,
        address: undefined,
        habits: ["sports", "games"]
    };
    var textJSON = JSON.stringify(obj, null, 4);
    console.log(textJSON);
    输出:
    {
        "name": "bulger",
        "age": 18,
        "habits": [
            "sports",
            "games"
        ]
    }
{% endhighlight %}

还有一个定义在对象中的`toJSON()`方法，用于更深层次的自定义。

##### 4.解析选项
解析函数`JSON.parse()`也可以传入第二个参数，为了避免和`JSON.stringify()`的过滤函数混淆，它被称为`还原函数`。
{% highlight javascript %}
    var obj = {
        name: "bulger",
        age: 18,
        address: undefined,
        habits: ["sports", "games"]
    };
    var textJSON = JSON.stringify(obj);
    JSON.parse(textJSON, function(key, value){
        if (conditions) {
            return value;
        }
    });
{% endhighlight %}
同过滤器函数一样，传入一个键和一个值，而且都需要返回一个值。如果返回了`undefined`，则表明结果中要删除这个键;返回其它值，就将该值插入到结果中。