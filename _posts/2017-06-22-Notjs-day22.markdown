---
layout: post
title:  "Day22 高级技巧"
date:   2017-06-22
categories: 《JavaScript高级程序设计》笔记
spend: 
excerpt: ""
---
##### 1.作用域安全的构造函数
{% highlight javascript %}
    function Person(name, age){
        if (this instanceof Person) {
            this.name = name;
            this.age = age;
        }
        return new Person(name, age);
    }
{% endhighlight %}
避免没有使用`new`标识符和定义成其它作用域的变量。  

##### 2.惰性加载函数
有时候为了避免执行不必要的代码，需要使用惰性加载函数，它有以下两种实现方式:  

①在函数内避免多次执行相同的代码，可以在`if`语句内定义一个同名函数覆盖掉包含它的函数并执行，这样下次再执行这个函数，执行的就是`if`语句内新定义的函数了。
{% highlight javascript %}
    function load(){
        if (true) {
            load = function(){
                //doSomething
            };
        } else {
            load = function(){
                //doSomething
            };
        }
    }
{% endhighlight %}
②在声明函数时指定适当的函数，改造上面的函数如下:
{% highlight javascript %}
    var load = (function(){
        if (true) {
            return function(){
                //doSomething
            }
        } else {
            return function(){
                //doSomething
            }
        }
    })();
{% endhighlight %}

##### 3.函数节流(事件防抖)
传入两个参数，需要节流的函数和执行的作用域。
{% highlight javascript %}
    function throttle(method, context){
        clearTimeout(method.tId);
        method.tId = setTimeout(function(){
            method.call(context);
        }, 100);
    }
{% endhighlight %}
