---
layout: post
title:  "读《Spring实战》笔记"
date:   2018-03-28
category: JavaScript
spend: 
excerpt: ""
---
这一年又开始了，新公司对于很多前端的流程和脚手架都比较完善，让我觉得有点无所适从。突然间想在整个web开发中找到一种最舒适的协作方式，遂决定学习后端，恰好公司也在由Python向Java转型。

所以，我又开始作妖了。

#### 目录
1. <a href="#1">Day1 Spring 之旅<a/>

#### Day1 Spring 之旅
`spring`框架归根结底就只想达到一个目的：简化Java开发。

它通过以下4种策略来实现：
* 基于POJO（简单的Java对象）的轻量级和最小侵入性编程
* 通过依赖注入和面向接口实现松耦合
* 基于切面和惯例j进行声明式编程
* 通过切面和模板减少样板式代码

##### 一、依赖注入
举个例子可以说明这种模式。

我在上海租自如的房子。

首先自如先把房子从房东那里签下来，然后我再去找自如签约，我租了半年，依然不知道房东是谁，而房东也不关注是谁住在他的房子里。

他收到了钱，我也满足了住房需要。

在Java代码里，实现一个具体的功能需要多个类的相互协作，一旦耦合在一起后，首先不利于拓展，其次没法做单元测试。所以需要一个添加一个第三方来管理类与类之间的依赖关系。

##### 二、应用切面
继续上面的例子：

自如房子的租金里，清洁费也在其中占比。

我作为租客不需要去主动联系管家让人来打扫卫生，我也不知道谁会来帮我打扫卫生，我只需要在自如登记我的信息，自然会有人周期性的来打扫。

正如一个完整的系统里，需要对日志、权限、安全和事务进行管理，不可能每一个需要的地方都去逐个添加这些代码。
所以也需要引入第三方，我们只需要在它那里登记好信息，特定条件下即可触发。