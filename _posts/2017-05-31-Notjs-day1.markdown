---
layout: post
title:  "Day1 相等符 == "
date:   2017-05-31
categories: 我可能不会JavaScript
excerpt:  "" 
---

过去的某一天里,突然看到了一篇叫做[《如何通过饿了吗NodeJS面试》](https://github.com/ElemeFE/node-interview/tree/master/sections/zh-cn)的文章,里面提了几个关于js的基础问题,看后却没有一点头绪,我想确实该补一下知识了,那就打开犀牛书,每天记录一点吧!
{% highlight javascript %}  
    问题一:  
    temp2==undefined?   // 报错  
    问题二:  
    [1]==[1]?           // false
    问题三:  
    undefined==null?    // true
{% endhighlight %}  

印象中的`==`,是判断值是否相等,使用`==`时,如果类型不同,js会先去做类型转换,然后再比较值,但如果值本身是null或undefined的话就不会去执行类型转换了。

先看第一个问题,一不小心确实会以为结果为`true`了?`temp`确实未定义,但在这之前还未声明  

第二个问题,在做`==`比较时,如果两个运算数都是对象,则需要比较他们的引用值,左右两边并不是引用的同一个对象,所以为`false`  

最后一个问题,JS规定了`undefined==null`为`true`,它们的使用方式很相近,在`if`判断里都会转化为`false`,理解这个问题,需要追溯到js的设计之初来理解,这里参考阮一峰老师的[文章](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)
> 1995年JavaScript诞生时，最初像Java一样，只设置了null作为表示'无'的值。
  根据C语言的传统，null被设计成可以自动转为0。  
  但是，JavaScript的设计者Brendan Eich，觉得这样做还不够，有两个原因。  
  首先，null像在Java里一样，被当成一个对象。但是，JavaScript的数据类型分成原始类型（primitive）和合成类型（complex）两大类，Brendan Eich觉得表示"无"的值最好不是对象。  
  其次，JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich觉得，如果null自动转为0，很不容易发现错误。  
  因此，Brendan Eich又设计了一个undefined。
   

