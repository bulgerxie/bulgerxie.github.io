---
layout: post
title:  "Day11 面向对象的程序设计"
date:   2017-06-10
categories: 《JavaScript高级程序设计》笔记
spend: 2h
excerpt: ""
---
#### 一、访问器属性getter和setter
这个属性第一次相见时，并没有意识到有多大的用处，认为只是语言的一些内部实现方法，殊不知到今天，各种流行的MVVM框架都是依赖于它做数据绑定。  

对象的属性在创建时，都会带有一些特征值，数据属性和访问器属性，今天主要记录访问器属性`getter`和`setter`。
* getter:在读取函数时调用的函数，default:undefined
* setter:在设置函数时调用的函数，default:undefined  

这些属性不能直接定义，需要使用`Object.defineProperty()`来定义，该方法接收三个参数，属性所在的对象、属性的名字和一个描述符对象。其中，描述符对象的属性必须是:configurable、enumberable、writable和value。  

常用的使用访问器属性方式如下所示，即设置一个属性的值会导致另一个属性发生变化。
{% highlight javascript %}  
var book = {
    _year:  2004,
    edition: 1
}
Object.defineProperty(book, "year", {
    get: function() {
        return this._year;
    },
    set: function(newValue) {
        if (newValue > 2004) {
            this._year = newValue;
            this.edition += newValue - 2004;
        }
    }
});
book.year = 2005;
alert(book.edition);    //2
{% endhighlight %} 
#### 二、继承
对于这个主题，我看过不止4遍了，真正让我觉得通透的是返校拿毕业证那会儿，在图书馆里看到了一本薄薄的《Javascript面向对象精粹》，花了两天看完，深入简出，很是喜欢，后来还买了一本送朋友。
##### 1.构造函数继承
使用call或apply在子类的构造函数中执行一遍父类的构造函数，并改变this指向为子类。缺点是每实例一个对象都会执行一遍父类的构造函数。
##### 2.prototype模式
把子类的prototype属性指向父类的实例，切记要修改constructor的指向。缺点是每次都要实例化一下父类，占用内存。
##### 3.直接继承prototype
把子类的prototype属性指向父类的prototype属性，同样要修改constructor属性的指向，缺点是子类的prototype修改会影响到父类的prototype。
##### 4.利用空对象作为媒介
使用一个空对象的prototype指向父类的prototype，然后再用子类的prototype指向空对象的prototype，这样就避免了第3中方式的缺点。
##### 5.拷贝继承
把父类的prototype上的属性和方法拷贝到子类的prototype。

非构造函数的继承有object()方法、浅拷贝和深拷贝

