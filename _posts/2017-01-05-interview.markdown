---
layout: post
title:  "关于JS面试题目的一些解答"
date:   2017-01-05
categories: 面试
excerpt: 一、从HTML、CSS、JS谈谈如何优化网站页面性能
---

##### 一、从HTML、CSS、JS、图片谈谈如何优化网站页面性能
1.1 从HTML的角度来看，首先要精简HTML，减少DOM结构，比如没有必要为了换行而使用`div`；不要在HTML中设置长宽而使用比实际需要大的图片
{% highlight javascript %}
    <img width="100" height="100" src="img.jpg" alt="img" /> 
{% endhighlight %}
这样你的原图应该是`100x100`，而不是把`300x300`的图片压缩使用。
静态资源域名控制到2~4个之间，因为浏览器对相同域名的并发链接数有限制，一般为6~8个连接，且每个域名的第一个连接都要经历DNS查询。

1.2 从CSS的角度来看，样式主要使用外部样式和内嵌样式，使用外部样式是因为它能在浏览器中缓存，多次访问的话就不需要每次都发送HTTP请求，使用内嵌样式的话虽然减少了HTTP请求，但是增加了HTML的文件大小。

平衡这两者的用法是，网站主页使用内部样式，然后动态加载其它页面需要的外部样式，缓存在浏览器。引入外部样式时，先压缩合并，然后放到`<head>`标签中。

1.3 从JS角度来看，我们可以使用严格模式提升代码的编译器效率；避免使用JS修改页面布局，减少DOM结构的访问；使用事件代理；压缩合并后在`</body>`前引入外部JS。

1.4 把需要使用的图片制作成雪碧图，利用CSS的背景定位来显示需要的部分

##### 二、什么是严格模式，为什么要使用它，它和正常模式有哪些差异
严格模式是ES5提出时添加的第二种运行模式，旨在消除代码运行的不安全之处，保证代码的安全运行；提高编译器效率，增加运行速度；为未来的JS做好铺垫
       
1.变量必须先声明再使用

2.禁止this关键字指向全局变量

3.对象不能有重名的属性，函数不能有重名的参数

#### 三、一个网页从输入地址到显示页面发生了什么
简单点来说就是域名解析以及DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据、渲染ODM

#### 四、JS继承
JS里没有类的概念，实现继承完全是靠它的原型链。

由于JS里都是对象，为了让对象之间能够联系起来，且不引入`类`的概念增加初学者的难度，所以JS的作者引入`new`命令，用来从原型对象生成实例对象。作者继而又发现每个实例对象都有自己的属性和方法。这样做不到数据共享，而且还浪费资源。所以设置一个prototype属性，把需要共享的属性和方法方法放到该属性里，不需要共享的放到构造函数里。类似于本地的属性方法和引用的属性方法，实例创建时会自动引用prototype里的属性和方法，从而达到`继承`的目的。

构造函数的继承有四种方法。

1.构造函数继承

使用call或apply在子类的构造函数中执行一遍父类的构造函数，并改变this指向为子类。缺点是每实例一个对象都会执行一遍父类的构造函数。

2.prototype模式

把子类的prototype属性指向父类的实例，切记要修改constructor的指向。缺点是每次都要实例化一下父类，占用内存。

3.直接继承prototype

把子类的prototype属性指向父类的prototype属性，同样要修改constructor属性的指向，缺点是子类的prototype修改会影响到父类的prototype。

4.利用空对象作为媒介

使用一个空对象的prototype指向父类的prototype，然后再用子类的prototype指向空对象的prototype，这样就避免了第3种方式的缺点。

5.拷贝继承

把父类的prototype上的属性和方法拷贝到子类的prototype。

非构造函数的继承有object()方法、浅拷贝和深拷贝

#### 五、对移动前端的了解
移动前端开发分两大块,移动端网页和Hybrid内嵌页面开发。

1.css和js的选择
js尽量手写，不使用框架，因为移动端性能优化很大的一个瓶颈就是网络格式的不一致，有wifi、4G、3G和2G代码量在移动端开发是很大的一个考察点。例如zepto，大部分的人都只是使用它的选择器，哪怕是事件委派，用原生的js都可以简单的搞定,引入一个框架完全不值得。

能用css画的不要用图，能flex布局的不要用浮动，不要使用绝对定位，那样不利于页面布局的拓展。

#### 六、ES6

1.let,const
let:定义局部变量,const:定义常量
2.class,extends,super
函数继承
3.箭头函数
精简代码,this指向
4.模板字符串
(`)标识起始,${}来引用变量
5.解构赋值
从数组和对象中提取值，对变量进行赋值
6.默认值
